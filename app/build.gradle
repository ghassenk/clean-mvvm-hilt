apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.gk.app.android.testingviewmodels"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        //testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunner "com.gk.app.android.testingviewmodels.test.android.HiltRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    android {
        sourceSets {
            String mockSrcDir = 'src/mock/java'
            String commonSrcDir = 'src/commonTest/java'
            test {
                java.srcDirs += mockSrcDir
                java.srcDirs += commonSrcDir
            }
            androidTest {
                java.srcDirs += mockSrcDir
                java.srcDirs += commonSrcDir
            }
        }
    }

    testOptions {
        tasks.withType(Test) {
            options {
                jvmArgs '-noverify'
            }
            testLogging {
                // "full" in order to have an explicit stacktrace in the console output
                exceptionFormat = 'full'
            }
            // "false" in order to have a "build failed" when a test fails
            ignoreFailures = false
        }

        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
    }

    hilt {
        enableTransformForLocalTests = true
    }
}

dependencies {
    // Project
    implementation project(path: ':domain')

    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin_version}"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'
    implementation 'com.google.android.material:material:1.2.1'

    // We must use these for viewModels() delegate to work correctly with no zero argument
    // constructor view models and automatically inject the saved sate handle
    implementation 'androidx.fragment:fragment:1.2.5'
    implementation 'androidx.fragment:fragment-ktx:1.2.5'
    implementation 'androidx.activity:activity:1.1.0'
    implementation 'androidx.activity:activity-ktx:1.1.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-savedstate:2.2.0'

    // Hilt
    implementation 'com.google.dagger:hilt-android:2.29.1-alpha'
    kapt 'com.google.dagger:hilt-android-compiler:2.29.1-alpha'
    // Hilt with jetpack
    implementation 'androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha02'
    kapt 'androidx.hilt:hilt-compiler:1.0.0-alpha02'
    // Hilt for Robolectric tests.
    testImplementation 'com.google.dagger:hilt-android-testing:2.28-alpha'
    kaptTest 'com.google.dagger:hilt-android-compiler:2.29.1-alpha'
    // Hilt for Android tests.
    androidTestImplementation 'com.google.dagger:hilt-android-testing:2.28-alpha'
    kaptAndroidTest 'com.google.dagger:hilt-android-compiler:2.29.1-alpha'


    // Java Tests
    testImplementation "junit:junit:${versions.junit}"
    testImplementation "androidx.arch.core:core-testing:${versions.androidx_arch_core}"
    testImplementation "androidx.test:core:${versions.androidx_test_core}"
    testImplementation "androidx.test.espresso:espresso-core:${versions.androidx_test_espresso_core}"
    testImplementation "androidx.test.ext:junit:${versions.androidx_test_ext_junit}"
    testImplementation "androidx.test.ext:truth:${versions.androidx_test_truth}"
    testImplementation "androidx.test:rules:${versions.androidx_test_rule}"
    testImplementation "androidx.test:runner:${versions.androidx_test_runner}"
    testImplementation "com.google.truth:truth:${versions.truth}"
    testImplementation "com.squareup.okhttp3:mockwebserver:${versions.okhttp_mock_server}"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${versions.coroutines}"
    testImplementation "org.mockito:mockito-core:${versions.mockito}"
    testImplementation "org.robolectric:robolectric:${versions.robolectric}"
    testImplementation "androidx.constraintlayout:constraintlayout:${versions.constraint}"

    // Android Tests
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:${versions.okhttp_mock_server}"
    androidTestImplementation "androidx.test.ext:junit:${versions.androidx_test_junit}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${versions.androidx_test_espresso_core}"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:${versions.androidx_test_espresso_core}"
    androidTestImplementation "androidx.arch.core:core-testing:${versions.androidx_arch_core}"
    androidTestImplementation "androidx.constraintlayout:constraintlayout:${versions.constraint}"
    debugImplementation ("androidx.fragment:fragment-testing:${versions.androidx_fragment}") {
        // fix conflicts between espresso-core and fragment-testing
        // https://github.com/android/android-test/issues/731
        exclude group: 'androidx.test', module: 'monitor'
    }

}